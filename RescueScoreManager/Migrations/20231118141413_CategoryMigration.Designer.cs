// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RescueScoreManager.Data;

#nullable disable

namespace RescueScoreManager.Migrations
{
    [DbContext(typeof(RescueScoreManagerContext))]
    [Migration("20231118141413_CategoryMigration")]
    partial class CategoryMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.13");

            modelBuilder.Entity("RescueScoreManager.Data.RefereeDate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Availability")
                        .HasColumnType("TEXT");

                    b.Property<string>("RefereeId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RefereeId");

                    b.ToTable("RefereeDates");
                });

            modelBuilder.Entity("RescueScoreManager.Model.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("RescueScoreManager.Model.Club", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CompetitionId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CompetitionId");

                    b.ToTable("Clubs");
                });

            modelBuilder.Entity("RescueScoreManager.Model.Competition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("BeachType")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("BeginDate")
                        .HasColumnType("TEXT");

                    b.Property<int?>("ChronoType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("EntryLimitDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsEligibleToNationalRecord")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Organizer")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("PriceByAthlete")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PriceByClub")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PriceByEntry")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Speciality")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("SwimType")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Competitions");
                });

            modelBuilder.Entity("RescueScoreManager.Model.Licensee", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("BirthYear")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ClubId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Gender")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsGuest")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsLicencee")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LicenseeType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ClubId");

                    b.ToTable("Licensees");

                    b.HasDiscriminator<string>("LicenseeType").HasValue("Licensee");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("RescueScoreManager.Model.Athlete", b =>
                {
                    b.HasBaseType("RescueScoreManager.Model.Licensee");

                    b.Property<bool>("IsForfeit")
                        .HasColumnType("INTEGER");

                    b.Property<int>("OrderNumber")
                        .HasColumnType("INTEGER");

                    b.HasDiscriminator().HasValue("Athlete");
                });

            modelBuilder.Entity("RescueScoreManager.Model.Referee", b =>
                {
                    b.HasBaseType("RescueScoreManager.Model.Licensee");

                    b.Property<int>("RefereeLevel")
                        .HasColumnType("INTEGER");

                    b.HasDiscriminator().HasValue("Referee");
                });

            modelBuilder.Entity("RescueScoreManager.Data.RefereeDate", b =>
                {
                    b.HasOne("RescueScoreManager.Model.Referee", "Referee")
                        .WithMany("RefereeAvailabilities")
                        .HasForeignKey("RefereeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Referee");
                });

            modelBuilder.Entity("RescueScoreManager.Model.Club", b =>
                {
                    b.HasOne("RescueScoreManager.Model.Competition", "Competition")
                        .WithMany("Clubs")
                        .HasForeignKey("CompetitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Competition");
                });

            modelBuilder.Entity("RescueScoreManager.Model.Licensee", b =>
                {
                    b.HasOne("RescueScoreManager.Model.Category", "Category")
                        .WithMany("Licensees")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RescueScoreManager.Model.Club", "Club")
                        .WithMany("Licensees")
                        .HasForeignKey("ClubId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Club");
                });

            modelBuilder.Entity("RescueScoreManager.Model.Category", b =>
                {
                    b.Navigation("Licensees");
                });

            modelBuilder.Entity("RescueScoreManager.Model.Club", b =>
                {
                    b.Navigation("Licensees");
                });

            modelBuilder.Entity("RescueScoreManager.Model.Competition", b =>
                {
                    b.Navigation("Clubs");
                });

            modelBuilder.Entity("RescueScoreManager.Model.Referee", b =>
                {
                    b.Navigation("RefereeAvailabilities");
                });
#pragma warning restore 612, 618
        }
    }
}
