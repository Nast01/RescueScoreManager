// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RescueScoreManager.Data;

#nullable disable

namespace RescueScoreManager.Migrations
{
    [DbContext(typeof(RescueScoreManagerContext))]
    [Migration("20231128221202_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.13");

            modelBuilder.Entity("AthleteRelayTeam", b =>
                {
                    b.Property<string>("AthletesId")
                        .HasColumnType("TEXT");

                    b.Property<int>("RelayTeamsId")
                        .HasColumnType("INTEGER");

                    b.HasKey("AthletesId", "RelayTeamsId");

                    b.HasIndex("RelayTeamsId");

                    b.ToTable("AthleteRelayTeam", (string)null);
                });

            modelBuilder.Entity("CategoryMeetingElement", b =>
                {
                    b.Property<int>("CategoriesId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MeetingElementsId")
                        .HasColumnType("INTEGER");

                    b.HasKey("CategoriesId", "MeetingElementsId");

                    b.HasIndex("MeetingElementsId");

                    b.ToTable("MeetingElementCategory", (string)null);
                });

            modelBuilder.Entity("CategoryRace", b =>
                {
                    b.Property<int>("CategoriesId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RacesId")
                        .HasColumnType("INTEGER");

                    b.HasKey("CategoriesId", "RacesId");

                    b.HasIndex("RacesId");

                    b.ToTable("RaceCategory", (string)null);
                });

            modelBuilder.Entity("RescueScoreManager.Data.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("RescueScoreManager.Data.Club", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CompetitionId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CompetitionId");

                    b.ToTable("Clubs");
                });

            modelBuilder.Entity("RescueScoreManager.Data.Competition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("BeachType")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("BeginDate")
                        .HasColumnType("TEXT");

                    b.Property<int?>("ChronoType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("EntryLimitDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsEligibleToNationalRecord")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Organizer")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("PriceByAthlete")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PriceByClub")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PriceByEntry")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Speciality")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("SwimType")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Competitions");
                });

            modelBuilder.Entity("RescueScoreManager.Data.Heat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("EndHour")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsFinalA")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsFinalB")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RoundId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("StartHour")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoundId");

                    b.ToTable("Heats");
                });

            modelBuilder.Entity("RescueScoreManager.Data.HeatResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Disqualification")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("HeatId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("HeatResultType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDisqualified")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsForfeit")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsOfficial")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Lane")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TeamId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("HeatId");

                    b.HasIndex("TeamId");

                    b.ToTable("HeatResults");

                    b.HasDiscriminator<string>("HeatResultType").HasValue("HeatResult");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("RescueScoreManager.Data.Licensee", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("BirthYear")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ClubId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Gender")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsGuest")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsLicencee")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LicenseeType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ClubId");

                    b.ToTable("Licensees");

                    b.HasDiscriminator<string>("LicenseeType").HasValue("Licensee");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("RescueScoreManager.Data.Meeting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CompetitionId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("EndHour")
                        .HasColumnType("TEXT");

                    b.Property<int>("HeatType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("MeetingType")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("RelatedMeetingId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("StartHour")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CompetitionId");

                    b.HasIndex("RelatedMeetingId")
                        .IsUnique();

                    b.ToTable("Meetings");
                });

            modelBuilder.Entity("RescueScoreManager.Data.MeetingElement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("EndHour")
                        .HasColumnType("TEXT");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("MeetingId")
                        .IsRequired()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Order")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RaceId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("StartHour")
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("isFinalA")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("isFinalB")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("MeetingId");

                    b.HasIndex("RaceId");

                    b.ToTable("MeetingElements");
                });

            modelBuilder.Entity("RescueScoreManager.Data.Race", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CompetitionId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Discipline")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Distance")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Gender")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Interval")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsRelay")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("NumberByTeam")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Speciality")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CompetitionId");

                    b.ToTable("Races");
                });

            modelBuilder.Entity("RescueScoreManager.Data.RefereeDate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Availability")
                        .HasColumnType("TEXT");

                    b.Property<string>("RefereeId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RefereeId");

                    b.ToTable("RefereeDates");
                });

            modelBuilder.Entity("RescueScoreManager.Data.Round", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("HeatType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("MeetingElementId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("MeetingElementId");

                    b.ToTable("Rounds");
                });

            modelBuilder.Entity("RescueScoreManager.Data.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("EntryTime")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsForfeit")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsForfeitFinal")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RaceId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TeamType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RaceId");

                    b.ToTable("Teams");

                    b.HasDiscriminator<string>("TeamType").HasValue("Team");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("RescueScoreManager.Data.BeachHeatResult", b =>
                {
                    b.HasBaseType("RescueScoreManager.Data.HeatResult");

                    b.Property<int>("Position")
                        .HasColumnType("INTEGER");

                    b.HasDiscriminator().HasValue("BeachHeatResult");
                });

            modelBuilder.Entity("RescueScoreManager.Data.SwimHeatResult", b =>
                {
                    b.HasBaseType("RescueScoreManager.Data.HeatResult");

                    b.Property<bool>("IsForfeitFinal")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Time")
                        .HasColumnType("INTEGER");

                    b.HasDiscriminator().HasValue("SwimHeatResult");
                });

            modelBuilder.Entity("RescueScoreManager.Data.Athlete", b =>
                {
                    b.HasBaseType("RescueScoreManager.Data.Licensee");

                    b.Property<bool>("IsForfeit")
                        .HasColumnType("INTEGER");

                    b.Property<int>("OrderNumber")
                        .HasColumnType("INTEGER");

                    b.HasDiscriminator().HasValue("Athlete");
                });

            modelBuilder.Entity("RescueScoreManager.Data.Referee", b =>
                {
                    b.HasBaseType("RescueScoreManager.Data.Licensee");

                    b.Property<int>("RefereeLevel")
                        .HasColumnType("INTEGER");

                    b.HasDiscriminator().HasValue("Referee");
                });

            modelBuilder.Entity("RescueScoreManager.Data.IndividualTeam", b =>
                {
                    b.HasBaseType("RescueScoreManager.Data.Team");

                    b.Property<string>("AthleteId")
                        .HasColumnType("TEXT");

                    b.HasIndex("AthleteId");

                    b.HasDiscriminator().HasValue("Individual");
                });

            modelBuilder.Entity("RescueScoreManager.Data.RelayTeam", b =>
                {
                    b.HasBaseType("RescueScoreManager.Data.Team");

                    b.HasDiscriminator().HasValue("Relay");
                });

            modelBuilder.Entity("AthleteRelayTeam", b =>
                {
                    b.HasOne("RescueScoreManager.Data.Athlete", null)
                        .WithMany()
                        .HasForeignKey("AthletesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RescueScoreManager.Data.RelayTeam", null)
                        .WithMany()
                        .HasForeignKey("RelayTeamsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CategoryMeetingElement", b =>
                {
                    b.HasOne("RescueScoreManager.Data.Category", null)
                        .WithMany()
                        .HasForeignKey("CategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RescueScoreManager.Data.MeetingElement", null)
                        .WithMany()
                        .HasForeignKey("MeetingElementsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CategoryRace", b =>
                {
                    b.HasOne("RescueScoreManager.Data.Category", null)
                        .WithMany()
                        .HasForeignKey("CategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RescueScoreManager.Data.Race", null)
                        .WithMany()
                        .HasForeignKey("RacesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RescueScoreManager.Data.Club", b =>
                {
                    b.HasOne("RescueScoreManager.Data.Competition", "Competition")
                        .WithMany("Clubs")
                        .HasForeignKey("CompetitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Competition");
                });

            modelBuilder.Entity("RescueScoreManager.Data.Heat", b =>
                {
                    b.HasOne("RescueScoreManager.Data.Round", "Round")
                        .WithMany("Heats")
                        .HasForeignKey("RoundId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Round");
                });

            modelBuilder.Entity("RescueScoreManager.Data.HeatResult", b =>
                {
                    b.HasOne("RescueScoreManager.Data.Heat", "Heat")
                        .WithMany("HeatResults")
                        .HasForeignKey("HeatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RescueScoreManager.Data.Team", "Team")
                        .WithMany("HeatResults")
                        .HasForeignKey("TeamId");

                    b.Navigation("Heat");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("RescueScoreManager.Data.Licensee", b =>
                {
                    b.HasOne("RescueScoreManager.Data.Category", "Category")
                        .WithMany("Licensees")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RescueScoreManager.Data.Club", "Club")
                        .WithMany("Licensees")
                        .HasForeignKey("ClubId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Club");
                });

            modelBuilder.Entity("RescueScoreManager.Data.Meeting", b =>
                {
                    b.HasOne("RescueScoreManager.Data.Competition", "Competition")
                        .WithMany("Meetings")
                        .HasForeignKey("CompetitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RescueScoreManager.Data.Meeting", "RelatedMeeting")
                        .WithOne()
                        .HasForeignKey("RescueScoreManager.Data.Meeting", "RelatedMeetingId");

                    b.Navigation("Competition");

                    b.Navigation("RelatedMeeting");
                });

            modelBuilder.Entity("RescueScoreManager.Data.MeetingElement", b =>
                {
                    b.HasOne("RescueScoreManager.Data.Meeting", "Meeting")
                        .WithMany("MeetingElements")
                        .HasForeignKey("MeetingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RescueScoreManager.Data.Race", "Race")
                        .WithMany("MeetingElements")
                        .HasForeignKey("RaceId");

                    b.Navigation("Meeting");

                    b.Navigation("Race");
                });

            modelBuilder.Entity("RescueScoreManager.Data.Race", b =>
                {
                    b.HasOne("RescueScoreManager.Data.Competition", "Competition")
                        .WithMany("Races")
                        .HasForeignKey("CompetitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Competition");
                });

            modelBuilder.Entity("RescueScoreManager.Data.RefereeDate", b =>
                {
                    b.HasOne("RescueScoreManager.Data.Referee", "Referee")
                        .WithMany("RefereeAvailabilities")
                        .HasForeignKey("RefereeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Referee");
                });

            modelBuilder.Entity("RescueScoreManager.Data.Round", b =>
                {
                    b.HasOne("RescueScoreManager.Data.Category", "Category")
                        .WithMany("Rounds")
                        .HasForeignKey("CategoryId");

                    b.HasOne("RescueScoreManager.Data.MeetingElement", "MeetingElement")
                        .WithMany("Rounds")
                        .HasForeignKey("MeetingElementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("MeetingElement");
                });

            modelBuilder.Entity("RescueScoreManager.Data.Team", b =>
                {
                    b.HasOne("RescueScoreManager.Data.Race", "Race")
                        .WithMany("Teams")
                        .HasForeignKey("RaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Race");
                });

            modelBuilder.Entity("RescueScoreManager.Data.IndividualTeam", b =>
                {
                    b.HasOne("RescueScoreManager.Data.Athlete", "Athlete")
                        .WithMany("IndividualTeams")
                        .HasForeignKey("AthleteId");

                    b.Navigation("Athlete");
                });

            modelBuilder.Entity("RescueScoreManager.Data.Category", b =>
                {
                    b.Navigation("Licensees");

                    b.Navigation("Rounds");
                });

            modelBuilder.Entity("RescueScoreManager.Data.Club", b =>
                {
                    b.Navigation("Licensees");
                });

            modelBuilder.Entity("RescueScoreManager.Data.Competition", b =>
                {
                    b.Navigation("Clubs");

                    b.Navigation("Meetings");

                    b.Navigation("Races");
                });

            modelBuilder.Entity("RescueScoreManager.Data.Heat", b =>
                {
                    b.Navigation("HeatResults");
                });

            modelBuilder.Entity("RescueScoreManager.Data.Meeting", b =>
                {
                    b.Navigation("MeetingElements");
                });

            modelBuilder.Entity("RescueScoreManager.Data.MeetingElement", b =>
                {
                    b.Navigation("Rounds");
                });

            modelBuilder.Entity("RescueScoreManager.Data.Race", b =>
                {
                    b.Navigation("MeetingElements");

                    b.Navigation("Teams");
                });

            modelBuilder.Entity("RescueScoreManager.Data.Round", b =>
                {
                    b.Navigation("Heats");
                });

            modelBuilder.Entity("RescueScoreManager.Data.Team", b =>
                {
                    b.Navigation("HeatResults");
                });

            modelBuilder.Entity("RescueScoreManager.Data.Athlete", b =>
                {
                    b.Navigation("IndividualTeams");
                });

            modelBuilder.Entity("RescueScoreManager.Data.Referee", b =>
                {
                    b.Navigation("RefereeAvailabilities");
                });
#pragma warning restore 612, 618
        }
    }
}
